# Pulumi Azure Pipelines task extension
# Run tests and create a new artifact
# to be published in the Visual Studio Marketplace
# under the pulumi publisher ID.

trigger:
- master

stages:
- stage: build
  displayName: 'Build and test'
  jobs:
  - job: build
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      displayName: 'Restore node_modules for buildAndReleaseTask/'
      inputs:
        workingDir: buildAndReleaseTask/
        verbose: true

    - task: Npm@1
      displayName: 'Restore node_modules for buildAndReleaseTask/tests/'
      inputs:
        workingDir: buildAndReleaseTask/tests
        verbose: true

    - task: Npm@1
      displayName: 'Install mocha globally'
      inputs:
        command: 'custom'
        customCommand: i -g mocha

    - task: Npm@1
      displayName: 'Run unit tests'
      inputs:
        command: 'custom'
        customCommand: run test
      env:
        INPUT_AZURESUBSCRIPTION: 'fake-subscription-id'

    - script: |
        # Since we are running the task in its unpackaged form, we should specify the inputs manually.
        # That means we must prefix them with INPUT_*, which is what the task agent itself does too.
        export INPUT_AZURESUBSCRIPTION=Pulumi
        export INPUT_CWD=examples/
        export INPUT_COMMAND=preview
        export INPUT_STACK=${EXAMPLE_STACK}
        npm start

- stage: package
  condition:
    or(
      eq(variables['Build.Reason'], 'IndividualCI'),
      eq(variables['Build.Reason'], 'BatchedCI'),
      eq(variables['ManualOverride'], 'true')
    )
  displayName: 'Package extension'
  jobs:
  - job: tfxCreate
    displayName: 'Create VSIX'
    steps:
    - task: Npm@1
      displayName: 'Restore node_modules for buildAndReleaseTask/'
      inputs:
        workingDir: buildAndReleaseTask/
        verbose: true

    - task: Npm@1
      displayName: 'Compile TS to JS'
      inputs:
        workingDir: buildAndReleaseTask/
        command: 'custom'
        customCommand: run tsc

    - task: Npm@1
      displayName: 'Run example - create infrastructure'
      inputs:
        command: 'custom'
        customCommand: start
      env:
        INPUT_AZURESUBSCRIPTION: 'Pulumi'
        INPUT_CWD: 'examples/'
        INPUT_COMMAND: 'up'
        INPUT_ARGS: '--yes --skip-preview'
        INPUT_STACK: $(example.stack)
    
    - task: Npm@1
      displayName: 'Run example - destroy infrastructure'
      inputs:
        command: 'custom'
        customCommand: start
      env:
        INPUT_AZURESUBSCRIPTION: 'Pulumi'
        INPUT_CWD: 'examples/'
        INPUT_COMMAND: 'destroy'
        INPUT_ARGS: '--yes --skip-preview'
        INPUT_STACK: $(example.stack)

    - task: TfxInstaller@1
      inputs:
        version: 'v0.6.x'

    - task: ExtensionVersion@1
      displayName: 'Query extension version'
      inputs:
        connectTo: 'VsTeam'
        connectedServiceName: 'Pulumi Marketplace'
        publisherId: 'pulumi'
        extensionId: 'build-and-release-task'
        versionAction: 'Patch'
        outputVariable: 'Extension.Version'
        extensionVersionOverride: 'Extension.VersionOverride'

    - task: PackageVSTSExtension@1
      displayName: 'Package extension'
      inputs:
        extensionVersion: '$(Extension.Version)'
        updateTasksVersion: true
        updateTasksVersionType: patch

    - task: PublishPipelineArtifact@0
      displayName: 'Upload extension VSIX'
      inputs:
        artifactName: 'vsix'
        targetPath: $(Extension.OutputPath)

